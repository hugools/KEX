<docs lang="markdown">
[TODO: write documentation for this plugin.]
</docs>

<config lang="json">
{
  "name": "Get PPINr",
  "type": "window",
  "tags": [],
  "ui": "",
  "version": "0.1.0",
  "cover": "",
  "description": "[TODO: describe this plugin with one sentence.]",
  "icon": "extension",
  "inputs": null,
  "outputs": null,
  "api_version": "0.1.8",
  "env": "",
  "permissions": [],
  "requirements": ["https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.18.1/cytoscape.umd.js", "http://localhost:8080/cytoscape-cise.js"],
  "dependencies": [],
  "defaults": {"w": 20, "h": 10}
}
</config>

<script lang="javascript">
class ImJoyPlugin {
  async setup() {
    api.log('initialized')
  }

  async run(ctx) {
        var protein = await api.prompt("What is your protein?");
    var interactions = await api.prompt("How many interaction do you want to find?");
    var url= await `https://string-db.org/api/json/interaction_partners?identifiers=${protein}%0d&limit=${interactions}`;
    await fetch(url)
    .then(response => response.json())
    .then(data => {
       var matches=[];
       var scores=[]
       for (i = 0; i < data.length; i++) {
          var bestMatchString=JSON.stringify(data[i]);
          let bestMatchStringTwo=bestMatchString.replace("[{","{");
          let bestMatchStringThree=bestMatchStringTwo.replace("}]","}");
          var bestMatchObject=JSON.parse(bestMatchStringThree);
          matches.push(bestMatchObject.preferredName_B);
          scores.push(bestMatchObject.score);
       }
        var elemts=[{ data: { id: protein } }];
        for (i = 0; i < matches.length; i++) {
          elemts.push({ data: { id: matches[i] } });
          elemts.push({
                  data: {
                  id: i+" "+scores[i],
                  source: protein,
                  target: matches[i]
                        }
                        })
       }


               var cy = cytoscape({
container: document.getElementById('cy'),
elements: elemts,
layout: {
    name: 'circle'
},
          
          style: [
        {
            selector: 'node',
            style: {
                'background-color': 'grey',
                label:'data(id)'
            }
        }]    
         
      });

    cy.on('mouseover', 'edge', function(){
    
    });
  

  cy.edges().on('click', function(e){
    var str=e.target['_private']['data']['id'];
    var message=str.substring(str.length-5, str.length);
    console.log(message)
    alert("The interaction score (min: 0, max: 1) is: "+message);
  });
       
  var collection = cy.collection();
    cy.nodes().on('click', function(e){
  var clickedNode = e.target;
    collection = collection.union(clickedNode);
    console.log(collection[collection.length-1]['_private']['data']['id'])
    update(collection);
});



  function update(x) {
  var protein=x[x.length-1]['_private']['data']['id'];
  console.log(protein)
  var url=`https://string-db.org/api/json/interaction_partners?identifiers=${protein}%0d&limit=${interactions}`;
  fetch(url)
  .then(response => response.json())
    .then(data => {
       var matches=[];
       var scores=[];
       for (i = 0; i < data.length; i++) {
          var bestMatchString=JSON.stringify(data[i]);
          let bestMatchStringTwo=bestMatchString.replace("[{","{");
          let bestMatchStringThree=bestMatchStringTwo.replace("}]","}");
          var bestMatchObject=JSON.parse(bestMatchStringThree);
          matches.push(bestMatchObject.preferredName_B);
          scores.push(bestMatchObject.score);
       }
       
        for (i = 0; i < matches.length; i++) {
          elemts.push({ data: { id: matches[i] } });
          elemts.push({
                  data: {
                  id: elemts.length+" "+scores[i],
                  source: protein,
                  target: matches[i]
                        }
                        })
        }
               var cy = cytoscape({
container: document.getElementById('cy'),
elements: elemts,
layout: {
    name: 'cise'
},
          
          style: [
        {
            selector: 'node',
            style: {
                'background-color': 'grey',
                label:'data(id)'
            }
        }]    
         
      });

      cy.edges().on('click', function(e){
    var str=e.target['_private']['data']['id'];
    var message=str.substring(str.length-5, str.length);
    console.log(message)
    alert("The interaction score (min: 0, max: 1) is: "+message);
  });

        var collection = cy.collection();
    cy.nodes().on('click', function(e){
  var clickedNode = e.target;
    collection = collection.union(clickedNode);
    console.log(collection[collection.length-1]['_private']['data']['id'])
    update(collection);
});

    })}
  
     
    });

        var parameters = {
          "species": 9606,
          "limit": 5,
          "caller_identity": "in_development"
        };


  }
  
}





api.export(new ImJoyPlugin())
</script>

<style>
#cy {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0px;
    left: 0px;
}
</style>

<window>
<div id="cy"></div>
</window>
